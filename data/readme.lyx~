#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
A -- not so -- quickly guide for the first piece of codes
\end_layout

\begin_layout Standard
So, I am going to quickly introduce the *.hpp and *.cpp files that I have
 been writing these days.
 And how do you guys could compile and use them.
 Moreover, I am going to set here some philosophy and good practices.
 Even been something quite personal, it is interesting to have everybody
 writing the -- same -- code using more or less the same style.
 None mandatory, of course.
\end_layout

\begin_layout Section
Some philosophy and these bullshits
\end_layout

\begin_layout Standard
1) To write some piece of code if, at least, you want to learn something
 about its content: The best way to learn the real meaning of the nature
 behavior, is to write yourself a code to mimic that, and to see it running.
 Now you should think 
\begin_inset Quotes eld
\end_inset

LOL
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
2) Using a modern programing language; portable; powerfull; object-oriented
 -- i.e.
 science-oriented --; fast; and constant on time: C++.
\end_layout

\begin_layout Standard
3) The mathematical issues we leave up to the GNU Scientific Library (GSL,
 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
name "https://www.gnu.org/software/gsl/manual/gsl-ref.pdf"
target "https://www.gnu.org/software/gsl/manual/gsl-ref.pdf"

\end_inset


\family default
 ).
 It is a library writen in C, with inline functions and internal handler
 of errors; BLAS for linear algebra; FFTs; splines; numerical things; randomly
 problems; statistical features; and much more.
 Used in several other packages and cover almost everything one may need
 in a scientific application.
 Not just the GSL lib for mathematical operations, but to start it has all
 we need and probably it will keep been enough some years later.
 It is really powerfull.
 There is a copy of the last GSL release in the 
\family typewriter
\color blue
../catalyst/lib/
\family default
\color inherit
 Dropbox folder and there is a quickly how-to install in the 
\family typewriter
\color blue
readme.txt
\family default
\color inherit
 file.
\end_layout

\begin_layout Standard
4) If the C++ is the most powerfull programing language.
 The Boost C++ library -- 
\begin_inset CommandInset href
LatexCommand href
name "http://www.boost.org/"
target "http://www.boost.org/"

\end_inset

 -- makes the C++ the most powerfull one in the universe.
 So, of course we are going to use that too.
 In principle we are going to use Boost C++ to handle the parallelization
 with MPI method.
 Again there is a copy of the last Boost release in the 
\family typewriter
../catalyst/lib/
\family default
 Dropbox folder and there is a quickly how-to install in the 
\family typewriter
\color blue
readme.txt
\family default
\color inherit
 file.
 But lets keep this topic for a future readme.
 Starts your code whitout care with parallel things and thus for now the
 Boost C++ are not that important.
\end_layout

\begin_layout Standard
5) Macros to control things inside the code are forbidden.
 To do such things, please use the C struct or C++ class.
 We can use macros just to replace strings in the compilation time and no
 more.
 For example, if we used to return a success running from any subroutine
 with 
\family typewriter
\color blue
return 0;
\family default
\color inherit
 statement, it is more high level to write 
\family typewriter
\color blue
return EXIT_SUCCESS;
\family default
\color inherit
 where EXIT_SUCCESS alias was previously defined as 0 using 
\family typewriter
\color blue
#define EXIT_SUCCESS 0
\family default
\color inherit
.
 Macros always in upper case.
 And to avoid the compiler complaing for the same head file included twice,
 we are going to use the macro shield.
 We starts every head file checking if some given head file macro was defined
 previuosly.
 And if yes -- i.e.
 that head file was included before --, the compiler will avoid to compile
 that piece of code and go to the next.
 The head file macro to protect the compilation will be the class name or
 sctruct name declared in that file, using uppercase and starting with two
 underlines, 
\begin_inset Quotes eld
\end_inset

__
\begin_inset Quotes erd
\end_inset

.
 Given some class defined in a head file called 
\family typewriter
\color blue
my_class.hpp
\family default
\color inherit
, the file must start with 
\family typewriter
\color blue
#ifndef __MY_CLASS_HPP
\family default
\color inherit
 and to finish with 
\family typewriter
\color blue
#endif
\family default
\color inherit
.
 Keep notes of all the macros you have been using to some 
\begin_inset Quotes eld
\end_inset

used macros table
\begin_inset Quotes erd
\end_inset

 someday.
 Of course they migh not overlaps each other.
\end_layout

\begin_layout Standard
6) And someday also we are going to talk about MP, MPI and CUDA.
 But it is too early.
\end_layout

\begin_layout Standard
7) So far, I am using the following methodology to name the 
\family typewriter
\color blue
*.cpp
\family default
\color inherit
 files: given a function called 
\family typewriter
\color blue
my_function()
\family default
\color inherit
 member of a class called 
\family typewriter
\color blue
my_class
\family default
\color inherit
 declared in the 
\family typewriter
\color blue
my_class.hpp
\family default
\color inherit
, the inplementation file of the function is called: 
\family typewriter
\color blue
my_class__my_function.cpp
\family default
\color inherit
.
 The name of the class followed by two underlines and then the name of the
 function.
 Blank spaces changed by single underlines.
 I am trying to avoid the practice of short names like 
\family typewriter
\color blue
myf.cpp
\family default
\color inherit
 or 
\family typewriter
\color blue
f.cpp
\family default
\color inherit
 for something called 
\family typewriter
\color blue
my_function()
\family default
\color inherit
.
\end_layout

\begin_layout Standard
8) And of course, declarations in the head files and definitions in the
 implementation files.
 Every single function must live alone in your own file.
 If we are creating overloaded functions, then they can live together in
 the same implementation file.
 Just inline members of C++ classes or C structures must be declared and
 also defined in the head file.
 Keep on mind: encapsulation and object-orientation.
\end_layout

\begin_layout Standard
9) And talking about object-oriented methodology, always keep the full name
 of the objects.
 If in some scope you have created a variable 
\family typewriter
\color blue
var
\family default
\color inherit
 of type 
\family typewriter
\color blue
my_class
\family default
\color inherit
 and now you want to use this variable to invoke 
\family typewriter
\color blue
my_function()
\family default
\color inherit
 on that scope, uses 
\family typewriter
\color blue
var.my_class::my_function()
\family default
\color inherit
.
 And try to not use the namespace statement.
 If we are talking about a C sctruct and since the object-orientation is
 quite meaningless, so we are free to use a variable called 
\family typewriter
\color blue
var
\family default
\color inherit
 of type 
\family typewriter
\color blue
my_struct
\family default
\color inherit
 to invoke 
\family typewriter
\color blue
my_fucntion()
\family default
\color inherit
 with 
\family typewriter
\color blue
var.my_function()
\family default
\color inherit
.
\end_layout

\begin_layout Standard
10) Lets try to use all the statement in lowercase and to name things with
 its full name.
 So, for example, given a kinetic energy variable, it might be called just
 
\family typewriter
\color blue
kinetic_energy
\family default
\color inherit
 and not 
\family typewriter
\color blue
kine
\family default
\color inherit
 or 
\family typewriter
\color blue
engk
\family default
\color inherit
 or 
\family typewriter
\color blue
E_kin
\family default
\color inherit
.
 Just the well known short names from computation environment (
\begin_inset Quotes eld
\end_inset

num
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

const
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

init
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sys
\begin_inset Quotes erd
\end_inset

 etc); physics (
\begin_inset Quotes eld
\end_inset

hf
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

dft
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

bomd
\begin_inset Quotes erd
\end_inset

 etc.); or chemistry (
\begin_inset Quotes eld
\end_inset

mol
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

H
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

Z
\begin_inset Quotes erd
\end_inset

 etc) may use its short names in the code.
\end_layout

\begin_layout Standard
11) Comments.
 Before something else the code is for academic purpose.
 If one are reading it to learn something (C++? physics? quantum chemistry?)
 it have to, at least, looks like clean and well commented.
\end_layout

\end_body
\end_document
